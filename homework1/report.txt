Homework 1: Getting to Know U(buntu)
John Scott

Problem 1:

1. clear - clear all previous commands' output text from the terminal
$ cat secrets.txt
nothing to see here
$ clear

(terminal becomes just...)
$

Clears the previous commands, cat secrets.txt and clear, as well as any output from the commands from the current terminal display.


2. cat - output the contents of a file
$ cat secrets.txt
nothing to see here
$

Displays the contents of secrets.txt which happens to be "nothing to see here."


3. whoami - outputs your user name
$ whoami
john
$

Outputs the user name, which in this case is "john."


4. which - shows the complete path of a command or file
$ which which
/usr/bin/which
$

Displays the path of the command "which."


5. uname - print information about the system
$ uname
Linux
$

Outputs the name of the current Operating System, which in this case in Linux.


6. date - outputs the current date/time
$ date
Fri Feb  9 13:32:09 PST 2018
$

Returns the current date and time based on location.


7. find - search for files by name within a given directory
$ find secrets.txt
secrets.txt
$

Searches for file named "secrets.txt" and returns its name to show it exists.


8. diff - output differences between two files
$ diff secrets.txt filewithnothinginit.txt
1d0
< nothing to see here
$

Reports the number of differences between secrets.txt and filewithnothinginit.txt and outputs the actual difference.


9. du - report disk space used by a file/directory
$ du Desktop/
4       Desktop/
$

Reports the approximate disk space used by the Desktop directory.


10. time - measure how long a program takes to run
$ time cat secrets.txt
nothing to see here

real    0m0.006s
user    0m0.002s
sys     0m0.003s
$

Runs "cat secrets.txt" then gives a few measurements of how long it took to complete.



Problem 2:

1. HOME - the pathname of the user's home directory; used in tilde expansion

2. ! - expands to the decimal process ID of the most recent background command

3. $ - expands to the decimal process ID of the invoked shell

4. !! - escapes the "!" reserved name to place the literal character "!" in the prompt

5. PATH -  a string formatted as described in XBD Environment Variables, used to effect command interpretation

6. ? - expands to the decimal exit status of the most recent pipeline

7. * - expands to the positional parameters, starting from one, initially producing one field for each positional parameter that is set

8. .. - refers to the parent directory in a relative path

9. >> - redirects stdout to a file; creates the file if not present, otherwise appends to it

10. << - redirects stdin to a file; creates the file if not present, otherwise prepends to it



Problem 3:

1. bin - contains the executable programs that must be available in order to attain minimal functionality for the purposes of booting and repairing a system

2. home - contains users' home directories and serves as the repository for a user's personal files, directories, and programs

3. sbin - contains executable programs, but are mostly administrative tools that should be made available only to the root user

4. mnt - intended for use as the temporary mount points for mounting storage devices, such as CDROMs, floppy disks and USB key drives; can be empty, or it can contain subdirectories for mounting individual devices

5. var - contains files to which the system writes data during the course of its operation and does not share itself over a network with other computers


1. cache - base directory relative to which user specific non-essential data files are stored (generally contains the stored cache of web browsers and other applications)

2. config - base directory relative to which user specific configuration files are stored

3. local - base directory relative to which user specific data files are stored



Problem 4:

Bash commands design and usage are a perfect example of the Rule of Simplicity of the Unix Philosophy.
Many of the commands used in bash are simply-named and perform a small, specific task.
However combining many of these commands allows proficient users to perform big and small tasks very quickly and with great precision.
That is a very appreciated feature of bash commands that clearly embodies the Rule of Simplicity.
The embodiment is shown by putting "a high value on simple solutions, that looks for ways to break program systems up into small cooperating pieces."
Bash commands also demonstrates the Rule of Composition, which states "Design programs to be connected to other programs," by how easily chain-able bash commands are.
